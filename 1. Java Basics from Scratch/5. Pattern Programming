//=========================================[ Solving One Dimensional Pattern Problems ]=========================================
/*
import java.util.Scanner;
public class printstar 
{	
	public static void main(String[] args) 
  {
		int n = 20;
		int starcount;
		for(starcount=1; starcount<=n; starcount++) 
			System.out.print("*");                      // ********************
	}
}        */

//-------------------------------------------------------------------------------------------
//Printing consecutive numbers in a row, starting from 1?.....12345678..or..1,2,3,4,5...

/* :: PSEUDOCODE ::
1. START
2. INPUT "n"
3. FOR num = (1 to n)
4. {
5.   PRINT num
6. } 
7. STOP   */

/*import java.util.Scanner;
public class Main 
{	
	public static void main(String[] args) 
  {
    Scanner in = new Scanner(System.in);
		int n = in.nextInt();                    // 10
		for(int i=1; i<=n; i++) 
			System.out.print(i+" ");               // 1 2 3 4 5 6 7 8 9 10
	}
}         */

/* :: PSEUDOCODE ::
1. START
2. INPUT "n"
3. FOR num = (1 to n)
4. {
5.   PRINT num
6.   PRINT ","
7. } 
8. STOP   */

/*import java.util.Scanner;
public class Main 
{	
	public static void main(String[] args) 
  {
    Scanner in = new Scanner(System.in);
		int n = in.nextInt();                   // 10
		for(int i=1; i<=n; i++) 
        {	System.out.print(i);              // 1,2,3,4,5,6,7,8,9,10.
	     	if(i != n)   
         		System.out.print(",");
         	else
              System.out.print(".");
        }
    }
}       */ 
//------------------------------------------------------------------------------------------

//Try the Java Code to print a # after every 3 stars. [Sample Output: ***#***#**]
/*:: PSEUDOCODE ::
1. START
2. INPUT "n" and "m"
3. FOR (starcount = 1 to n)
4. {
5.   PRINT "*"
6.   IF((starcount % m == 0) && (starcount != n)) 
7.   {
8.       PRINT "#"   
9.    }
10. } 
11. STOP

Here,
'n' is the number of stars to be printed
'm' is the no. of places after which every hash is to be printed. */

/*
import java.util.Scanner;
class Main
{	
	public static void main(String[] args) 
    {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt(), m = in.nextInt();    // 9 3
      	for(int i = 1 ; i <= n ; i++)          // 1 2 3 4 5 6 7 8
        {
         	System.out.print("*");              // * * * # * * * # * * *
          	if((i % m == 0) && (i != n))      // 1 2 3   4 5 6   7 8 9          
              System.out.print("#");          // (i!=n)-> this condition should be written bcoz # should be not print at the end
        }			
	}
}          */

//=======================================================[ ASSIGNMENT 1 ]===============================================================

/* 1) Printing stars in vertical fashion
      Write a JAVA program to print stars in vertical fashion
      Eg: If the input is 7, then output will be: *
                                                  *
                                                  *
                                                  *
                                                  *
                                                  *
                                                  *
                                                  *                  */
/*
import java.util.Scanner;
class Main
{
  public static void main(String args[])
  {
   Scanner in = new Scanner(System.in);
   int n = in.nextInt();
    for(int i = 1; i <= n; i++)              // 3
    {
      System.out.println("*");               // O/P : *
    }                                         //      *
  }                                          //       *
}       */
//------------------------------------------------------------------------------------

/* 2) Printing N numbers in the same line with comma for every 3 value
      Write a JAVA program to print N numbers in the same line with comma for every 3 values
      Eg.: If the input is 7, then output will be : 123,456,7   */
      
/*
import java.util.Scanner;
class Main
{
  public static void main(String args[])
  {
    Scanner in = new Scanner (System.in);
    int n = in.nextInt();
    for(int i = 1; i <= n ; i++)
    {
      System.out.print(i);
      if((i % 3 == 0) && (i != n))
        System.out.print(",");
    }
  }
}*/

//=================================================[ Solving Two Dimensional Patterns - Intermediate ]===================================================================

/* 1) Printing stars in a square pattern like this?
	****
	****
	****
	****         */

/* :: PSEUDOCODE ::
1)   START
2)   INPUT: n
3)   FOR cur_row = (1 to n)
4)   {
5) 	FOR cur_col= (1 to m)
6)	{
7) 		PRINT(“*”)
8) 	}
9)	PRINT “\n”
10)  }
11)  STOP */

/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	Scanner in = new Scanner(System.in);
	int n = in.nextInt();                    //  n = 4
	for(int row = 1 ; row <= n ; row++)
	{
	   for(int col = 1 ; col <= n ; col++)
	   {
	      System.out.print("*");              // o/p : ****
	   }                                      //       ****
	   System.out.println();                  //       ****
	}                                         //       ****
   }    
}*/
//-----------------------------------------------------------------------

/* 2) Print stars in the pattern of a right-angled triangle?
   	*
   	**
   	***
   	****      */
   
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	Scanner in = new Scanner(System.in);
	int n = in.nextInt();                    //  n = 4
	for(int row = 1 ; row <= n ; row++)
	{
	   for(int col = 1 ; col <= row ; col++)
	   {
	      System.out.print("*");              // o/p : *
	   }                                      //       **
	   System.out.println();                  //       ***
	}                                         //       ****
   }    
}*/
//----------------------------------------------------------------------------

/* 3) o/p : 1
	    12
            123
            1234	*/
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	Scanner in = new Scanner(System.in);
	int n = in.nextInt();                    //  n = 4
	for(int row = 1 ; row <= n ; row++)
	{
	   for(int col = 1 ; col <= row ; col++)
	   {
	      System.out.print(col);              // o/p : 1
	   }                                      //       12
	   System.out.println();                  //       123
	}                                         //       1234
   }    
}*/
//-----------------------------------------------------------------------------

/* 4) Which of the following codes will print the pattern given below:
   	1
   	2 3
   	4 5 6
   	7 8 9 10      */
   
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	Scanner in = new Scanner(System.in);
	int n = in.nextInt(),count = 0;                    //  n = 4
	for(int row = 1 ; row <= n ; row++)
	{
	   for(int col = 1 ; col <= row ; col++)
	   {
	      System.out.print(++count+" ");              // o/p : 1
	   }                                              //       2 3
	   System.out.print("\n");                        //       4 5 6
	}                                                 //       7 8 9 10
   }    
}*/ 
//------------------------------------------------------------------------------------

/* 5) Write a Java code print the following pattern of size 4.
	*
	# #
	* * * 
	# # # #         */
	
/* :: PSEUDOCODE ::
START
INPUT: n
FOR cur_row = (1 to n)
{
 	FOR cur_col= (1 to cur_row)
 	{
        IF( n%2 == 0)
       {
          PRINT "#"
       }
       ELSE     
      {
          PRINT "*"
       }
    }
 	PRINT "\n"
}
STOP	*/

/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	Scanner in = new Scanner(System.in);
	int n = in.nextInt();            		//  n = 4
	for(int row = 1 ; row <= n ; row++)
	{
	   for(int col = 1 ; col <= row ; col++)
	   {
         	if(row % 2 == 0)
	      		System.out.print("# ");              // o/p : *
         	else                                         //       ##
           		System.out.print("* ");              //       ***
	   }                                                 //       ####       
	   System.out.print("\n");                  
	}                                         
   }    
}*/

//====================================================[ ASSIGNMENT 2 ]==============================================================

/* 1) Printing * and # alternatively in a right angled triangular pattern
      Write a JAVA program to print * and # alternatively in a right angled triangular pattern
      Sample Input:  4
      Sample Output: *
                     #*
                     #*# 
		     *#*#    */
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	  Scanner in = new Scanner(System.in);
	  int n = in.nextInt(), count = 0;            	//  n = 4
	  for(int row = 1 ; row <= n ; row++)
	  {
	     for(int col = 1 ; col <= row ; col++)
	     {
           count++;
         	if(count % 2 == 0)
	      		System.out.print("#");             // o/p : *
         	else                                       //       #*
           		System.out.print("*");             //       #*#
	     }                                             //       *#*#       
	   System.out.print("\n");                  
	  }                                         
   }    
}*/

//---------------------------------------------------------------------------------
/* 2) Printing numbers in square pattern
      Write a JAVA code to print the numbers in square fashion.
      Sample Input: 4
      Sample Output: 1111
                     2222
                     3333
                     4444	*/
		 
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	  Scanner in = new Scanner(System.in);
	  int n = in.nextInt();            	//  n = 3
	  for(int row = 1 ; row <= n ; row++)
	  {
	     for(int col = 1 ; col <= n ; col++)
	      		System.out.print(row);              // o/p : 111 							            	
	   System.out.print("\n");                          //       222
	  }                                                 //       333
   }    
}*/
//-------------------------------------------------------------------------

/* 3) Printing numbers in Right angle triangle
      Write a JAVA code to print numbers in right angle triangle pattern.
      Sample Input: 4
      Sample Output: 1
                     2 2
                     3 3 3
                     4 4 4 4	*/
		
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	  Scanner in = new Scanner(System.in);
	  int n = in.nextInt();            	            //  n = 3
	  for(int row = 1 ; row <= n ; row++)
	  {
	     for(int col = 1 ; col <= row ; col++)
	      		System.out.print(row);              // o/p : 1 							            	
	   System.out.print("\n");                          //       22
	  }                                                 //       333
   }    
}*/

//==============================================[ Solving Two Dimensional Patterns - Advanced - 1 ]====================================

/* 1) Print stars in an inverted right-angled triangular pattern.
   o/p : ***
         **
	 *		*/

/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	  Scanner in = new Scanner(System.in);
	  int n = in.nextInt();            	            //  n = 3
	  for(int row = 1 ; row <= n ; row++)
	  {
	     for(int col = n ; col >= row ; col--)
	      		System.out.print("*");              // o/p : *** 							            	
	     System.out.print("\n");                        //       **
	  }                                                 //       *
   }    
}*/

/*:: PSEUDOCODE ::
START
INPUT: n
num = n
FOR row_no = (1 to n)
{
 	FOR col_no = (1 to (n -(cur_row - 1)) )
 	{
 		PRINT(“*”)
 	}
 	PRINT “\n”
}
STOP*/
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	  Scanner in = new Scanner(System.in);
	  int n = in.nextInt();            	            //  n = 3
	  for(int row = 1 ; row <= n ; row++)
	  {
	     for(int col = 1 ; col <= (n-(row-1)) ; col++)
	      		System.out.print("*");              // o/p : *** 							            	
	     System.out.print("\n");                        //       **
	  }                                                 //       *
   }    
}*/
//--------------------------------------------------------------------------------------

/* 2) Print stars in an inverted right-angled triangular pattern.
      o/p : 1234
            123
	    12
	    1		*/
	    
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	  Scanner in = new Scanner(System.in);
	  int n = in.nextInt();            	            //  n = 3
	  for(int row = 1 ; row <= n ; row++)
	  {
             int count = 0;
	     for(int col = n ; col >= row ; col--)
	      		System.out.print(++count);              // o/p : 123							            	
	   System.out.print("\n");                              //       12
	  }                                                     //       1
   }    
}
*/

/*:: APPROACH 2 PSEUDOCODE ::
START
INPUT: n
num = n
FOR row_no = (1 to n)
{
 	FOR col_no = (1 to cur_row)
 	{
 		PRINT(“col_no”)
 	}
 	PRINT “\n”
	num = num-1
}
STOP	*/

/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	  Scanner in = new Scanner(System.in);
	  int n = in.nextInt(), num = n;            //  n = 3
	  for(int row = 1 ; row <= n ; row++)
	  {
	     for(int col = 1 ; col <= num ; col++)		
           	  System.out.print(col);              	// o/p : 123                     
	     System.out.print("\n");               	//       12                       
             num = num - 1;                             //       1
	  }                                                 
   }    
}	*/
//--------------------------------------------------------------------------

/* 3) Print the inverse right triangle with numbers in the incremental order as below:
   o/p : 1234
         234
         34
         4       */
	 
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	  Scanner in = new Scanner(System.in);
	  int n = in.nextInt();            //  n = 3
	  for(int row = 1 ; row <= n ; row++)
	  {
        int num = row;
	     for(int col = 1 ; col <= n-(row-1) ; col++)		
           	  System.out.print(num++);              	// o/p : 123                     
	     System.out.print("\n");               	        //       23                       
                                                                //       3
	  }                                                 
   }    
}*/
//---------------------------------------------------------------------------------

/* 4) Print stars in a pyramid pattern as below:
   	*
       * *
      * * * 
     * * * *	*/
     
/* :: PSEUDOCODE :: 
START
INPUT: n
FOR row_no = 1 to n
{
    // Handle spaces for each row
    FOR space = 1 to (n - row_no)
    {
        PRINT " "
    }
    // Handle stars for each row
     FOR col_no = 1 to row_no
     {
     	PRINT "* "
     }
     PRINT "\n"   
}
STOP	*/
     
/*
import java.util.Scanner;
class Main
{
   public static void main(String args[])
   {
   	  Scanner in = new Scanner(System.in);
	  int n = in.nextInt();            //  n = 3
	  for(int row = 1 ; row <= n ; row++)
	  {
         
             for(int space = 1 ; space <= (n-row) ; space++)		
           	  System.out.print("_");   
	     for(int col = 1 ; col <= row ; col++)		
           	  System.out.print("* ");             // o/p : __*                     
	     System.out.print("\n");                  //       _* *                       
	  }                                           //       * * *      
   }    
}	*/
//------------------------------------------------------------------------------------

/* 5) Mirrored right triangle pattern.  i/P : 4
      o/p:   ___*
             __**
             _***
	     ****        */
	     
/*import java.util.Scanner;
class Main
{
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		for(int row_no = 1 ; row_no <= n ; row_no++){
			for(int space = 1 ; space <= (n-row_no) ; space++ ) {
				System.out.print(" ");
			}
			for(int col_no = 1 ; col_no <= row_no ; col_no++){
				System.out.print("*");
			}
			System.out.print("\n");			
		}
	}
} 		*/
//------------------------------------------------------------------------------
/* 6) Print Inverse Pyramid pattern. i/p : 4
      * * * *
       * * *
        * *
	 *          */	
	 
// :: APPROACH 1 ::
/*
import java.util.Scanner;
class Main
{
     public static void main(String[] args) 
     {
	Scanner in = new Scanner(System.in);
	int n = in.nextInt();
	for(int row_no = 0 ; row_no < n ; row_no++)
        {
          for(int space = 1 ; space <= row_no ; space++) 
		System.out.print(" ");
	  for(int col_no = 1 ; col_no <= (n-row_no) ; col_no++)
		System.out.print("* ");
	  System.out.print("\n");			
	}
     }
}	*/

//:: APPROACH 2 ::
/*
import java.util.Scanner;
class Main
{
  public static void main(String[] args) {
    Scanner in = new Scanner(System.in);
	int n = in.nextInt();
	for(int row_no = 1 ; row_no <= n ; row_no++){
		for(int space = 1 ; space <= (row_no - 1) ; space++ ) {
			System.out.print(" ");
		}
		for(int col_no = 1 ; col_no <= (n-(row_no - 1)) ; col_no++){
			System.out.print("* ");
		}
    	System.out.print("\n");			
	}	
  }
}*/
//------------------------------------------------------------------------------

/* 7) Print a diamond pattern. i/p : 4 
       o/p : 	 *
  		* *
 	       * * *
              * * * *
              * * * *
               * * *
                * *
                 *	*/
		 
// :: APPROACH 1 ::
/*
import java.util.Scanner;
class Main
{
  public static void main(String[] args) {
    Scanner in = new Scanner(System.in);
	int n = in.nextInt();
	for(int row_no = 1 ; row_no <= n ; row_no++)
	{
		for(int space = 1 ; space <= (n-row_no) ; space++ ) {
			System.out.print(" ");
		}
		for(int col_no = 1 ; col_no <= row_no ; col_no++){
			System.out.print("* ");
		}
    		System.out.print("\n");	
	}
	for(int row_no = 1 ; row_no <= n ; row_no++)
	{
		for(int space = 1 ; space <= (row_no - 1) ; space++ ) {
			System.out.print(" ");
		}
		for(int col_no = 1 ; col_no <= (n-(row_no - 1)) ; col_no++){
			System.out.print("* ");
		}
    		System.out.print("\n");			
	}	
  }
}	*/

// :: APPROACH 2 ::
/*
import java.util.Scanner;
class Main{
	public static void main(String[] args) {
		    Scanner in = new Scanner(System.in);
		    int n = in.nextInt();
		    for(int rownum = 1; rownum <= n; ++rownum){
    		    for(int space = 1; space <= (n- rownum ); ++space){
    		        System.out.print(" ");
		        }
            	for(int colnum = 1; colnum <= rownum; ++ colnum){
    		        System.out.print("* ");
    		    }  
            	System.out.print("\n");
		    }
    		int starcount = n;
    		for(int rownum =1; rownum <= n; rownum = rownum + 1){
    		    for(int space = 1; space <= rownum - 1; space = space + 1){
        		    System.out.print(" ");
        		}
        		for(int colnum = 1; colnum <= starcount; colnum = colnum + 1){
        		    System.out.print("* ");
        		}
    		    System.out.print("\n");
      		    starcount = starcount -1;
		     }
    }
}	*/

//===================================================[ ASSIGNMENT 3 ]=============================================================
/* 1) Printing Half Diamond pattern
      Write a JAVA program to print stars in Half diamond pattern.
      Sample Input: n = 4
      Sample Output:      *
  		         ***
 	       	        *****
                       *******           */
// :: APPPROACH 1 ::		      
/*
import java.util.Scanner;
class Main {
	public static void main (String[] args)
    {
	    Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        for(int row = 1 ; row <= n ; row++)
        {
          for(int space = 1 ; space <= (n-row) ; space++)
            System.out.print(" ");
          for(int col = 1 ; col <= (row * 2)-1  ; col++)        //     *
  		System.out.print("*");			        //    ***
  	  System.out.print("\n");			       //    *****
        }                                                      //   *******
    }                                                          
}	*/
//-------------------------------------------------------------------------------------

/* 2) Printing numbers in inverse right angle triangle
   Write a JAVA code to print the numbers in inverse right angle triangle
   Sample Input: 4
   Sample Output: 4321
                  321
                  21
                  1       */
// :: APPROACH 1 ::
/*
import java.util.Scanner;
class Main
{
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int n = in.nextInt();
    for(int row = 0 ; row < n ; row++)
    {
       for(int col = (n-row) ; col >= 1 ; col--)      // o/p: 4321 
  			System.out.print(col);        //      321   
  	  System.out.print("\n");                     //      21
    }                                                 //      1
  }
}*/

// :: APPROACH 2 ::
/*
import java.util.Scanner;
class Main{
	public static void main (String[] args){
	    Scanner in = new Scanner(System.in);
	    int n = in.nextInt();
	    int val = n;
	    for(int curr_row = 1; curr_row <= n; curr_row++)
	    {
            // Handle numbers for each row
	        for(int curr_col = val; curr_col >= 1; curr_col--)
	        {
	            System.out.print(curr_col);
	        }
	        val--;
	        System.out.println();
	    }
	}
}*/
//-----------------------------------------------------------------------------------

/* 3) Printing numbers in pyramid pattern
      Write a JAVA code to print the numbers in pyramid pattern.
      Sample Input: 4
      Sample Output:     1
                        2 3
		       4 5 6
		      7 8 9 10     */
// :: APPROACH 1 ::		     
/*
import java.util.Scanner;
  class Main {
	public static void main (String[] args)
    {
	    Scanner in = new Scanner(System.in);
        int n = in.nextInt(), count = 0;
        for(int row = 1 ; row <= n ; row++)
        {
          for(int space = 1 ; space <= (n-row) ; space++)
            System.out.print(" ");
          for(int col = 1 ; col <= row ; col++)                //      1
  			System.out.print(++count+" ");          //    2 3
  	      System.out.print("\n");			       //    4 5 6
        }                                                      //   7 8 9 10
    }                                                          
}*/

// :: APPROACH 2 ::
/*
import java.util.Scanner;
class Main{
	public static void main (String[] args){
	    Scanner in = new Scanner(System.in);
	    int n = in.nextInt();
	    int val = 1;
	    for(int curr_row = 1; curr_row <= n; curr_row++)
	    {
            // Handle space for each row
	        for(int space = 1; space <= (n - curr_row); space++){
	            System.out.print(" ");
	        }
            // Handle numbers for each row
	        for(int curr_col = 1; curr_col <= curr_row; curr_col++)
	        {
	            System.out.print(val + " ");
	            val++;
	        }
	        System.out.println();
	    }
	}
}		*/

//============================================[ Solving Two Dimensional Patterns - Advanced - 2 ]=====================================

/* 1) Inverse Half Diamond Pattern , print stars in that pattern for the size n=4.
	o/p : *******
	       *****
	        ***
      		 *	*/
/*
import java.util.Scanner;
class Main
{
  public static void main(String[] args) {
    Scanner in = new Scanner(System.in);
	int n = in.nextInt(), count = 1;
	for(int row = 1 ; row <= n ; row++)
	{
		for(int space = 1 ; space <= (row-1) ; space++ ) 
			System.out.print(" ");
		for(int col = 1 ; col <= (n*2)-count ; col++)
			System.out.print("*");
    		System.out.print("\n");	
		count = count + 2;
	}	
  }
}	*/


// :: PSEUDOCODE APPROACH 2::
/*
START
INPUT: n
star_count = (2 * n - 1)
FOR row_no = 1 to n
{
    // Handle spaces for each row
    FOR space = 1 to (row_no -1)
    {
        PRINT " "
    }
    // Handle stars for each row
     FOR col_no = 1 to (star_count - 2 * (row_no - 1))
     {
     PRINT "*"
     }
PRINT "\n"   
STOP		*/

/*
import java.util.Scanner;
class Main
{
  public static void main(String[] args) 
  {
    Scanner in = new Scanner(System.in);
	int n = in.nextInt(), count = 2*n - 1;
	for(int row = 1 ; row <= n ; row++)
	{
	    for(int space = 1 ; space <= (row-1) ; space++ ) 
			System.out.print(" ");                       // COUNT - 2*(ROW-1)
	    for(int star = 1 ; star <= (count-2*(row-1)) ; star++)   // : 7 - 2*(1-1) = 7 - 2*0 = 7 - 0 = 7
			System.out.print("*");                       // : 7 - 2*(2-1) = 7 - 2*1 = 7 - 2 = 5.....SO ON
    	    System.out.print("\n");	
        }	
   }
}	*/
//-----------------------------------------------------------------------------

/* 2 ) Print stars in the following diamond pattern for the size n = 4.
	O/P : 	   *   
		  ***
     		 *****
   		*******
		 *****
       		  ***
         	   *		*/
/*
import java.util.Scanner;
class Main
{
  public static void main(String[] args) 
  {
    Scanner in = new Scanner(System.in);
	int n = in.nextInt(), count = -1;
	for(int row = 1 ; row <= n ; row++)
	{
	    for(int space = 1 ; space <= (n-row) ; space++ ) 
			System.out.print(" ");
            count = count + 2;
	    for(int star = 1 ; star <= count; star++)
			System.out.print("*");
    	    System.out.print("\n");
        
	}
        n = n-1;
        for(int row = 1 ; row <= n ; row++)
	{
	    for(int space = 1 ; space <= row ; space++ ) 
			System.out.print(" ");
            count = count - 2;
	    for(int star = 1 ; star <= count ; star++)
			System.out.print("*");
    	    System.out.print("\n");
        }	
   }
}	*/

// :: PSEUDOCODE :: APPROACH 2 ::
/*
START
INPUT: n
FOR row_no = 1 to n
{
    // Handle spaces for each row
    FOR space = 1 to (n - row_no)
    {
        PRINT " "
    }
    // Handle spaces for each row
     FOR col_no = 1 to (2 * row_no - 1)
     {
     	PRINT "*"
     }
     PRINT "\n" 
}  
star_count = (2 * (n - 1) - 1)
FOR row_no = 1 to n
{
    // Handle spaces for each row
    FOR space = 1 to (row_no)
    {
        PRINT " "
    }
    // Handle spaces for each row
     FOR col_no = 1 to (star_count - 2 * (row_no - 1))
     {
         PRINT "*"
     }
    PRINT "\n" 
}  
STOP	*/

/*
import java.util.Scanner;
class Main
{
  public static void main(String[] args) 
  {
    Scanner in = new Scanner(System.in);
    int n = in.nextInt();
    for(int row = 1 ; row <= n ; row++)
    {
	for(int space = 1 ; space <= (n-row) ; space++ ) 
		System.out.print(" ");
	for(int star = 1 ; star <= (2*row)- 1; star++)
		System.out.print("*");
    	System.out.print("\n");
    }
    int count = 2*(n-1) - 1;                             // count = 2*(n-1) - 1 = 2 *(4-1) - 1 = 6 - 1 = 5
    for(int row = 1 ; row <= n ; row++)
    {
	for(int space = 1 ; space <= row ; space++ ) 
		System.out.print(" ");
	for(int star = 1 ; star <= (count-2*(row-1)) ; star++)  // count-2*(row-1)    
		System.out.print("*");                          //   5  -2*(1  -1) = 5-2*0 = 5-0 = 5
    	System.out.print("\n");                                 //   5  -2*(2  -1) = 5-2*1 = 5-2 = 3....so on.
    }	
  }
 }	*/
 //------------------------------------------------------------------------------------------------
 
 /* 3) Printing the same diamond with stars and numbers as below for the size n = 4?
	o/p : 		1 
	               2*2
 	              3*3*3
    	             4*4*4*4
 	 	      3*3*3
  	               2*2
       	                1 	*/



	



		     

   












