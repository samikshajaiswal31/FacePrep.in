//======================================[ 1. Rearranging problems using Arrays ]=====================================

/* 1) What is the output of the below code?
import java.util.Scanner;
class Main 
{
  public static void main (String[] args) 
  {
    int arr[] = {10, 20, 30, 40};
    int a = 50;
    call(a,arr);                    // int ans = call(a,arr);   System.out.println(ans); then will be 52
    System.out.println(a);                // 50
    System.out.println(arr[0]);           // 100
    System.out.println(arr[1]);           // 200
  }
  public static void call(int a, int arr[])
  {
    a = a + 2;
    arr[0] = 100;
    arr[1] = 200;
  }
}                   */
/*
We have passed the variable 'a' and array values to the function. 
Inside the function, value 2 is added with the variable 'a' and 
array values in the index 0 and 1 are changed with different values. 
The added value is not printed inside the main function. This is because 'a' is a single variable. 
But for an array, when we try to print inside the main function the values get changed. 
This is because while passing an array it's reference will be passed.
*/
//----------------------------------------------------------------------

/* 2) Write a Java code to rotate an array.
      Sample Input: arr_size = 5
                    arr[] = {1, 2, 3, 4, 5}
                    no_of_rotations = 2
      Sample Output: 3 4 5 1 2
      (HINT: You have to circularly left shift array by 2 positions)      */
      
/*
import java.util.Scanner;
class Main
{
  public static void rotate(int n, int ary[], int r)
  {
    while(r > 0)
    {
      int temp = ary[0];
      for(int i = 0 ; i < (n-1) ; i++)
        ary[i] = ary[i+1];
      ary[n-1] = temp;
      r--;
    }
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0; i < size ; i++)
      arr[i] = in.nextInt();
    int rotation = in.nextInt();
    rotate(size, arr, rotation);
    for(int i = 0; i < size ; i++)
      System.out.println(arr[i]);
  }
}       */
//-------------------------------------------------------------------

/* 3) Write a Java code to segregate 0's and 1's in the given array.
      Sample Input: arr_size = 8
                    arr[] = {0, 1, 0, 0, 0, 1, 0, 1}
      Sample Output:  0 0 0 0 0 1 1 1
      (Hint: First print all 0's and then all 1's)          */

//---------------:: APPROACH 1 ::-------------------
/* 
import java.util.Scanner;
class Main
{
  public static void segregate(int n, int ary[])
  {
      int count0 = 0, count1 = 0;
      for(int i = 0 ; i < n ; i++)
      {
        if( ary[i] == 0 )
          count0++;
        if( ary[i] == 1 )
          count1++;
      }
      for(int i = 0 ; i < count0 ; i++)
        ary[i] = 0;
      for(int i = count0 ; i < (count0+count1) ; i++)
        ary[i] = 1;
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0; i < size ; i++)
      arr[i] = in.nextInt();
    segregate(size, arr);
    for(int i = 0; i < size ; i++)
      System.out.println(arr[i]);
  }
}            */

//---------------------:: APPROACH 2 ::-----------------------
/*
import java.util.Scanner;
class Main
{
  public static void segregate(int n, int ary[])
  {
      int zero_count = 0;
      for(int i = 0 ; i < n ; i++)
      {
        if( ary[i] == 0 )
          zero_count++;
      }
      for(int i = 0 ; i < n ; i++)
      {
        if( i < zero_count )
          ary[i] = 0;
        else 
          ary[i] = 1;
      }
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0; i < size ; i++)
      arr[i] = in.nextInt();
    segregate(size, arr);
    for(int i = 0; i < size ; i++)
      System.out.println(arr[i]);
  }
}             */
//-----------------------------------------------------------------------

/* 3) Write a Java code to group numbers in an array. 
      ( Negative numbers on the left and positive numbers on the right.)
   Sample Input:  arr_size = 6
                  arr[] = {-8, 9, 7, -2, -1, -3}
   Sample Output:	-8 -2 -1 -3 9 7                                   */

//---------------:: APPROACH 1 ::---------------
/*
import java.util.Scanner;
class Main
{
  public static void grouping(int n, int ary[])
  {
      int pos[] = new int[n], neg[] = new int[n];
      int count = 0, posCount = 0, negCount = 0;
      for(int i = 0 ; i < n ; i++)
      {
        if( ary[i] < 0 )
        {  
          neg[negCount] = ary[i];
          negCount++;
        }
        else
        {
           pos[posCount] = ary[i];
           posCount++;
         // System.out.println("pos "+pos[1]);
        }
      }
      for(int j = 0 ; j < negCount ; j++)
        ary[j] = neg[j];
      for(int j = negCount ; j < n ; j++)
      {
        ary[j] = pos[count];
    	count++;
      }
    }
   public static void main(String args[])
   {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0; i < size ; i++)
      arr[i] = in.nextInt();
    grouping(size, arr);
    for(int i = 0; i < size ; i++)
      System.out.println(arr[i]);
   }
}       */

//-------------:: APPROACH 2 ::---------------
/*
import java.util.Scanner;
class Main
{
  public static void grouping(int n, int ary[])
  {
      int pos[] = new int[n], neg[] = new int[n];
      int count = 0, posCount = 0, negCount = 0;
      for(int i = 0 ; i < n ; i++)
      {
        if( ary[i] < 0 )
        {  
          neg[negCount] = ary[i];
          negCount++;
        }
        else
        {
           pos[posCount] = ary[i];
           posCount++;
         // System.out.println("pos "+pos[1]);
        }
      }
      for(int j = 0 ; j < negCount ; j++)
        ary[j] = neg[j];
      for(int j = negCount ; j < n ; j++)
      {
        ary[j] = pos[count];
    	count++;
      }
    }
   public static void main(String args[])
   {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0; i < size ; i++)
      arr[i] = in.nextInt();
    grouping(size, arr);
    for(int i = 0; i < size ; i++)
      System.out.println(arr[i]);
   }
}           */

//============================================[ 1. ASSIGNMENT ]===================================================

/* 1) Left and Right Rotate
      Write a Java code to circularly right rotate odd position elements and circularly left rotate even position elements.
      Sample Input: arr_size = 10
                    arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
                    no_of_rotation = 2
   Consider 1, 3, 5, 7, 9 as odd position elements and 2, 4, 6, 8, 10 as even position elements.
   Assume array index starts from one.
      Sample Output:   7 6 9 8 1 10 3 2 5 4       */
      
/* 
import java.util.Scanner;
class Main 
{
    public static void left_rotate_even_elem(int arr_size, int arr[], int no_of_rotation)
    {
       int first_even_elem_index = 1;
       int last_even_elem_index;
       if(arr_size % 2 == 0)
       {
           last_even_elem_index = arr_size - 1;
       }
       else
       {
           last_even_elem_index = arr_size - 2;
       }
       for(int rotation = 1; rotation <= no_of_rotation; rotation++)
       {
           int temp = arr[first_even_elem_index];
           for(int index = 3; index < arr_size; index = index + 2)
           {
               arr[index - 2] = arr[index];
           }
           arr[last_even_elem_index] = temp;
       }
    }
    public static void right_rotate_odd_elem(int arr_size, int arr[], int no_of_rotation)
    {
       int first_odd_elem_index = 0;
       int last_odd_elem_index;
       if(arr_size % 2 == 1)
       {
          last_odd_elem_index = arr_size - 1;
       }
       else
       {
          last_odd_elem_index = arr_size - 2;
       }
       for(int rotation = 1; rotation <= no_of_rotation; rotation++)
       {
           int temp = arr[last_odd_elem_index];
           for(int index = (last_odd_elem_index - 2); index >= 0; index = index - 2)
            {
               arr[index + 2] = arr[index];
           }
           arr[first_odd_elem_index] = temp;
       }
    }
    public static void main(String args[])
    {
        Scanner in = new Scanner(System.in);
        int arr_size = in.nextInt();
        int arr[] = new int[arr_size];
        for(int index = 0; index <= (arr_size - 1); index++)
        {
            arr[index] = in.nextInt();
        }
        int no_of_rotation = in.nextInt();
        left_rotate_even_elem(arr_size, arr, no_of_rotation);
        right_rotate_odd_elem(arr_size, arr, no_of_rotation);
    
    for(int index = 0; index <= (arr_size - 1); index++)
        {
            System.out.print(arr[index]+" ");
        }
    }
}  		*/
//------------------------------------------------------------------------

/* 2) Moving all the zeroes to the end of an array
      Write a Java code to move all the zeroes of a given array to the end of the array.
      Sample Input: arr_size = 6
                    arr[] = {6, 7, 0, 4, 0, 2}
      Sample Output:  arr[] = {6, 7, 4, 2, 0, 0}    */

//-------------:: APPROACH 1 ::---------------------
/*
import java.util.Scanner;
class Main
{
  public static void zeroes(int n, int ary[])
  {
    int count = 0, arr[] = new int[n], index = 0;
    for(int i = 0 ; i < n ; i++)
    {
      if( ary[i] == 0 )
        count++;
      if( ary[i] > 0 )
        arr[index++] = ary[i];
    }
    for(int i = 0 ; i < count ; i++)
      arr[index++] = 0;
    for(int i = 0 ; i < n ; i++)
      System.out.print( arr[i] + " " );
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0 ; i < size ; i++)
      arr[i] = in.nextInt();
    zeroes(size, arr);
  }
}           */

//-------------:: APPROACH 2 ::-----------------
/*
import java.util.Scanner;
class Main 
{
  public static void zeroes(int n , int ary[])
  {
    int count = 0;
      for(int i = 0; i < n ; i++)
      {
        if(ary[i] != 0)
        {
          	int temp = ary[i];     // temp = 6 7 4 2
        	ary[i] = ary[count];   // ary[i] = 0 6 7 4
        	ary[count] = temp;     // ary[count] = 6 7 4 2
        	count++;               //  count = 1 2 3 4
        }
      }
  }
  public static void main(String args[])
    {
    	Scanner in = new Scanner(System.in);
    	int size = in.nextInt(), arr[] = new int[size];
    	for(int i = 0; i < size ; i++)
        	arr[i] = in.nextInt();
    	zeroes(size, arr);
    	for(int i = 0; i < size ; i++)
        	System.out.print(arr[i]+" ");
  	}
}  */
//====================================[ 2. Statistical problems using Arrays ]===================================

/* 1) What is the output of the following code?
import java.util.Scanner;
class Main
{
   public static void main (String[] args)
   {
      int arr[] = {1, 5, 5, 1};
      int max = arr[0];
      int index_of_max = 0;
      for(int index = 1; index < arr.length; index++)
      {
          if(arr[index] > max)
          {
              max = arr[index];
              index_of_max = index;
          }
      }
      System.out.println(index_of_max);               // o/p : 1
   }
}           */
//---------------------------------------------------------------------------------------

/* 2) Write a Java code to print the index of the second last occurrence of a given number.
      Sample Input: arr_size = 6
                    arr[] = {3, 5, 2, 5, 4, 5}
                    search_val = 5
      Sample Output:  3                       */

//------------------:: APPROACH 1 ::---------------------
/*
import java.util.Scanner;
class Main
{
  public static int occurrence(int n, int ary[], int val)
  {
    int count = 0, index = -1;
    for(int i = 0; i < n ; i++)
    {
      if( val == ary[i] )
        count++;
    }
    count = --count;
    for(int i = 0; i < n ; i++)
    {
      if( val == ary[i] )
      {  
        count--;
        if(count == 0)
          index = i;
      }
    }
    return index;
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0 ; i < size ; i++)
      arr[i] = in.nextInt();
    int search = in.nextInt();
    System.out.println(occurrence(size, arr, search));
  }
}             */

//----------------------:: APPROACH 2 ::---------------------
/*
import java.util.Scanner;
class Main
{
  public static int occurrence(int n, int ary[], int val)
  {
    int count = 0;
    for(int i = (n-1) ; i > 0 ; i--)
    {
      if( val == ary[i] )
        count++;
      if( count == 2 )
     	return i;
    }
    return -1;
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0 ; i < size ; i++)
      arr[i] = in.nextInt();
    int search = in.nextInt();
    System.out.println(occurrence(size, arr, search));
  }
}         */

//-----------------------------------------------------------------

/* 3) Write a Java code to print all the subsets of size 2.
      Sample Input:   arr_size = 5
                      arr[] = {50, 10, 30, 20, 0}
      Sample Output:	(50, 10) (50, 30) (50, 20) (50, 0)
			                (10, 30) (10, 20) (10, 0)
			                (30, 20) (30, 0)
			                (20, 0)                                   */
                      
 /*
import java.util.Scanner;
class Main
{
  public static void subset( int n, int ary[] )
  {
    for(int i = 0 ; i < n ; i++)
    {
       for(int j = (i+1) ; j < n ; j++)
          System.out.print( "("+ ary[i] + ", " + ary[j] + ") " );
       System.out.println();
    }
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0 ; i < size ; i++)
      arr[i] = in.nextInt();
    subset(size, arr);
  }
}        */
//-------------------------------------------------------------------

/* 4) Find the intention of the following code.
import java.util.Scanner;
class Main
{
    public static void main(String[] args) 
    {
        int arr_size, min;
        Scanner Sc = new Scanner(System.in);
        arr_size = Sc.nextInt();
        int arr[] = new int[arr_size];
        for (int index = 0; index < arr_size; index++) 
        {
            arr[index] = Sc.nextInt();
        }
        for (int index_1 = 0; index_1 < arr_size; index_1++) 
        {
            for (int index_2 = index_1 + 1; index_2 < arr_size; index_2++) 
            {
                if (arr[index_1] > arr[index_2]) 
                {
                    min = arr[index_1];
                    arr[index_1] = arr[index_2];
                    arr[index_2] = min;
                }
            }
        }
        System.out.println(arr[1]);        // 10 :Output is the second smallest element 
    }
}           */
//--------------------------------------------------------------------------

/* 5) Write a Java code to find the equilibrium element in the given array.
      (Hint: An equilibrium element in an array is the one which is having 
       equal sum of the elements in the right side and the left side)
      Sample Input:   arr_size = 6
                      arr[] = {1, 2, 3, 4, 3, 3}
      Sample Output:  4                                         */

//--------------:: APPROACH 1 ::-------------
/*
import java.util.Scanner;
class Main
{
  public static int equilibrium( int n, int ary[] )
  {
     int rightSum = 0, leftSum = 0;
     for(int j = (n-1) ; j >= 0 ; j--)
          rightSum += ary[j];
     for(int i = 0 ; i < ary.length ; i++)
     {
       rightSum -= ary[i];
       if( rightSum == leftSum )
         return ary[i];	
       leftSum += ary[i];
     }
    return -1;
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0 ; i < size ; i++)
      arr[i] = in.nextInt();
    System.out.println(equilibrium(size, arr));
  }
}                           */

//-----------------:: APPROACH 2 ::-----------------
/*
import java.util.Scanner;
class Main
{
  public static int equilibrium( int n, int ary[] )
  {
     for(int i = 0 ; i < n ; i++)
     {    
        int leftSum = 0;
     	for(int l = 0 ; l < i ; l++)
       		leftSum += ary[l];
        int rightSum = 0;
        for(int r = (i+1) ; r < n ; r++)
       		rightSum += ary[r];
      	if( rightSum == leftSum )
        	return ary[i];
      }
    return -1;
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0 ; i < size ; i++)
      arr[i] = in.nextInt();
    System.out.println(equilibrium(size, arr));
  }
}                 */
//------------------------------------------------------------------------

/* 6) What will be the output of the following code?
class Main
{
  public static void main(String args[])
  {
    int arr[] = new int[4];
    arr[1] = 1;
    arr = new int[2];
    System.out.println("arr[1] is " + arr[1]);      // arr[1] is 0
  }
}                                                 */

//==============================================[ 2. ASSIGNMENT ]=================================================
/* 1) Perfect Couple
      Write a Java code to find all pairs of elements whose sum is equal to the given value.
      Sample Input: arr_size = 5
                    arr[] = {50, 10, 30, 20, 0}
                    value = 30
      Sample Output:  10, 20
                      30, 0                     */
                      
/*
import java.util.Scanner;
class Main
{
  public static void subset( int n, int ary[], int val )
  {
    for(int i = 0 ; i < n ; i++)
    {
       if(ary[i] <= val)
       {
          for(int j = (i+1) ; j < n ; j++)
          {
            if( (ary[i] + ary[j]) == val )
              System.out.println( ary[i] + ", " + ary[j] );
          } 
       }  
    }
  }
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0 ; i < size ; i++)
      arr[i] = in.nextInt();
    int val = in.nextInt();
    subset(size, arr, val);
  }
}                     */
//------------------------------------------------------------------

/* 2) Printing subsets of size 3
      Write a Java code to print all subsets of size 3.
      Sample Input:   arr_size = 5
                      arr[] = {1, 7, 3, 4, 9}
      Sample Output:  (1, 7, 3) (1, 7, 4) (1, 7, 9) (1, 3, 4) (1, 3, 9) (1, 4, 9)
                      (7, 3, 4) (7, 3, 9) (7, 4, 9)
                      (3, 4, 9)                                             */
                      
/*
import java.util.Scanner;
class Main
{
  public static void subset( int n, int ary[] )
  {
    for(int i = 0 ; i < (n-1) ; i++) 
    {
      for(int j = (i+1) ; j < n ; j++)
      {
        for(int k = (j+1) ; k < n ; k++)
        	System.out.print( "(" + ary[i] + ", " + ary[j] + ", " + ary[k] + ") " );
      }
      System.out.println(); 
    }
  }  
  public static void main(String args[])
  {
    Scanner in = new Scanner(System.in);
    int size = in.nextInt(), arr[] = new int[size];
    for(int i = 0 ; i < size ; i++)
      arr[i] = in.nextInt();
    subset(size, arr);
  }
}         */
//===============================================================================================================







